# -*- coding: utf-8 -*-
"""Predictive_Analysis_On_Diabetic_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19p-Mp4jIzjdtridvHUmCz9r4xKn6YDSF

Importing all the required libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Create a dataframe"""

dataframe=pd.read_csv('diabetes.csv')
dataframe.head()

dataframe.columns

dataframe.dtypes

"""**Missing values in a given  dataset**"""

dataframe.isnull().sum()

dataframe.shape

"""**Correlation Coefficient**"""

dataframe.corr()

plt.figure(figsize=(15,15))
ax=sns.heatmap(dataframe.corr())
plt.savefig('correlation-coefficient.jpg')
plt.show()

plt.figure(figsize=(15,15))
ax=sns.heatmap(dataframe.corr(),annot=True)
plt.savefig('correlation-coefficient-annot-True.jpg')
plt.show()

"""**Descriptive Statistics of the given data**"""

dataframe.describe()

"""**Data Imputation**"""

dataframe.columns

for column in dataframe.columns[:-1]:
  print("---------------------------------",column,"------------------------------------------")
  sns.distplot(dataframe[column])
  plt.show()
  print()

# Intrepetation wrt to :
# Pregnancies -> Median
# Bloodpressure -> Mean
# Insulin -> Median
# BMI -> Mean
#  DiabetesPedigreeFunction -> Median
# Age -> Median
# Glucose -> Mean
# SkinThickness

dataframe.columns

dataframe['Pregnancies']=dataframe['Pregnancies'].replace(0,dataframe['Pregnancies'].median())
dataframe['BloodPressure']=dataframe['BloodPressure'].replace(0,dataframe['BloodPressure'].mean())
dataframe['Glucose']=dataframe['Glucose'].replace(0,dataframe['Glucose'].mean())
dataframe['SkinThickness']=dataframe['SkinThickness'].replace(0,dataframe['SkinThickness'].median())
dataframe['Insulin']=dataframe['Insulin'].replace(0,dataframe['Insulin'].median())
dataframe['BMI']=dataframe['BMI'].replace(0,dataframe['BMI'].mean())
dataframe['DiabetesPedigreeFunction']=dataframe['DiabetesPedigreeFunction'].replace(0,dataframe['DiabetesPedigreeFunction'].median())
dataframe['Age']=dataframe['Age'].replace(0,dataframe['Age'].median())

dataframe.head(20)

"""**Outlier Detection**"""

# X ---> Input Features
# Y ---> Target Value
X=dataframe.drop(columns="Outcome",axis=1)
Y=dataframe['Outcome']

X

Y

"""Outlier Detection -> Box Plot"""

fig,ax=plt.subplots(figsize=(10,10))
sns.boxplot(data=X,ax=ax)
plt.savefig('boxplot.jpg')
plt.show()

dataframe.shape

cols=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
for col in cols:
  Q1=X[col].quantile(0.25)
  Q3=X[col].quantile(0.75)
  IQR=Q3-Q1
  lower_bound=Q1-1.5*IQR
  upper_bound=Q3+1.5*IQR
  mask=(X[col]>=lower_bound) & (X[col]<=upper_bound)

X_outlier_detection=X[mask]
Y_outlier_detection=Y[mask]

X_outlier_detection.shape

Y_outlier_detection.shape

"""**Standardization**

Standard Normal Form :

Mean = 0

Standard Deviation =1
"""

from sklearn.preprocessing import StandardScaler
scalar=StandardScaler()
X_scaled=scalar.fit_transform(X_outlier_detection)

fig,ax=plt.subplots(figsize=(10,10))
sns.boxplot(data=X_scaled,ax=ax)
plt.savefig('boxplot_X_outlier_detection.jpg')
plt.show()

dataframe.columns

cols=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI',
       'DiabetesPedigreeFunction', 'Age']

type(X_scaled)

X_scaled=pd.DataFrame(X_scaled,columns=cols)
X_scaled.describe()

Y.value_counts()

fig,ax=plt.subplots(figsize=(10,10))
sns.boxplot(data=X_scaled,ax=ax)
plt.savefig('boxplot_X_outlier_detection.jpg')
plt.show()

Y_outlier_detection.value_counts()

type(X_scaled)

dataframe.shape

X_scaled.shape

X_scaled

"""Approach 2 : Quantiles"""

X_scaled.reset_index(drop=True,inplace=True)
Y_outlier_detection.reset_index(drop=True,inplace=True)

q=X_scaled['Insulin'].quantile(.95)
mask=X_scaled['Insulin']<q
dataNew=X_scaled[mask]
Y_outlier_detection=Y_outlier_detection[mask]

dataNew.shape

fig,ax=plt.subplots(figsize=(10,10))
sns.boxplot(data=dataNew,ax=ax)
plt.savefig('boxplot_X_outlier_detection_dataNew.jpg')
plt.show()

"""Model Training"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(dataNew,Y_outlier_detection,test_size=0.33,random_state=42)

X_train.shape

X_test.shape

"""Data Imbalance"""

y_train.value_counts()
# DataImbalance or biasesness
# We will observe that 0 count are much more than 1 count

"""SMOTE Technique"""

from imblearn.over_sampling import SMOTE
smote=SMOTE(random_state=42)
X_train_resampled,y_train_resampled=smote.fit_resample(X_train,y_train)

# Check resampled class distribution
print("\n Resampled class distribution : ")
print(pd.Series(y_train_resampled).value_counts())

from sklearn.linear_model import LogisticRegression
classification=LogisticRegression()
classification.fit(X_train_resampled,y_train_resampled)

"""Model Predictions"""

y_predictions=classification.predict(X_test)
print(y_predictions)

"""Model Evaluation"""

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_predictions)

from sklearn.metrics import classification_report
target_names=['Non-Diabetic','Diabetic']
print(classification_report(y_test,y_predictions,target_names=target_names))

import pickle
pickle.dump(classification,open("classification_model.pkl","wb"))

classification_model=pickle.load(open("classification_model.pkl","rb"))
classification_model.predict(X_test)